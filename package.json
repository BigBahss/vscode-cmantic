{
  "name": "cmantic",
  "displayName": "C-mantic",
  "description": "Provides various refactorings and commands for C/C++",
  "version": "0.2.1",
  "icon": "images/cmantic.png",
  "publisher": "tdennis4496",
  "author": {
    "name": "Tyler Dennis",
    "url": "https://github.com/BigBahss"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/BigBahss/vscode-cmantic"
  },
  "readme": "README.md",
  "engines": {
    "vscode": "^1.3.0"
  },
  "categories": [
    "Programming Languages"
  ],
  "keywords": [
    "c++",
    "refactor",
    "code action",
    "generate definition",
    "generate accessor"
  ],
  "activationEvents": [
    "onLanguage:c",
    "onLanguage:cpp"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "cmantic.switchHeaderSourceInWorkspace",
        "title": "Switch Header/Source in Workspace"
      },
      {
        "command": "cmantic.addDefinitionInSourceFile",
        "title": "C-mantic: Add Definition in matching source file"
      },
      {
        "command": "cmantic.addDefinitionInCurrentFile",
        "title": "C-mantic: Add Definition in this file"
      },
      {
        "command": "cmantic.createMatchingSourceFile",
        "title": "C-mantic: Create Matching Source File"
      },
      {
        "command": "cmantic.generateGetterSetter",
        "title": "C-mantic: Generate 'get' and 'set' methods"
      },
      {
        "command": "cmantic.generateGetter",
        "title": "C-mantic: Generate 'get' method"
      },
      {
        "command": "cmantic.generateSetter",
        "title": "C-mantic: Generate 'set' method"
      },
      {
        "command": "cmantic.addInclude",
        "title": "C-mantic: Add Include"
      },
      {
        "command": "cmantic.addHeaderGuard",
        "title": "C-mantic: Add Header Guard"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "command": "cmantic.switchHeaderSourceInWorkspace",
          "group": "navigation@100",
          "when": "resourceLangId =~ /^c|cpp$/ && config.C_mantic.contextMenu.switchHeaderSource"
        }
      ]
    },
    "configuration": [
      {
        "title": "C-mantic",
        "type": "object",
        "properties": {
          "C_mantic.extensions.headerFiles": {
            "type": "array",
            "default": [
              "h",
              "hpp",
              "hh",
              "hxx"
            ],
            "description": "File extensions to associate header files."
          },
          "C_mantic.extensions.sourceFiles": {
            "type": "array",
            "default": [
              "c",
              "cpp",
              "cc",
              "cxx"
            ],
            "description": "File extensions to associate source files."
          },
          "C_mantic.c.curlyBraceFormat.function": {
            "type": "string",
            "enum": [
              "New line",
              "Same line"
            ],
            "default": "New line",
            "description": "Controls how to format the opening curly brace when adding a new function definition in C."
          },
          "C_mantic.cpp.curlyBraceFormat.function": {
            "type": "string",
            "enum": [
              "New line",
              "New line for constructors and destructors",
              "Same line"
            ],
            "default": "New line for constructors and destructors",
            "description": "Controls how to format the opening curly brace when adding a new function definition in C++."
          },
          "C_mantic.cpp.curlyBraceFormat.namespace": {
            "type": "string",
            "enum": [
              "New line",
              "Same line"
            ],
            "default": "Same line",
            "description": "Controls how to format the opening curly brace when generating namespaces from a header in C++."
          },
          "C_mantic.cpp.indentation.namespace": {
            "type": "string",
            "enum": [
              "Auto",
              "Always",
              "Never"
            ],
            "default": "Auto",
            "description": "Controls whether to indent the body when generating namespaces from a header in C++. 'Auto' will detect namespace indentation from the header file."
          },
          "C_mantic.cpp.generateNamespaces": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether namespace blocks are generated when invoking 'Create Matching Source File' on a header containing namespaces."
          },
          "C_mantic.cpp.accessor.getterDefinitionLocation": {
            "type": "string",
            "enum": [
              "Generate definition inline",
              "Generate definition below class body",
              "Generate definition in matching source file"
            ],
            "default": "Generate definition inline",
            "description": "Controls where the definition of new 'get' methods are placed. If set to 'Generate definition in matching source file' and a matching source file cannot be found, then it will fallback to 'Generate definition below class body'."
          },
          "C_mantic.cpp.accessor.setterDefinitionLocation": {
            "type": "string",
            "enum": [
              "Generate definition inline",
              "Generate definition below class body",
              "Generate definition in matching source file"
            ],
            "default": "Generate definition inline",
            "description": "Controls where the definition of new 'set' methods are placed. If set to 'Generate definition in matching source file' and a matching source file cannot be found, then it will fallback to 'Generate definition below class body'."
          },
          "C_mantic.contextMenu.switchHeaderSource": {
            "type": "boolean",
            "default": true,
            "description": "Show 'Switch Header/Source in Workspace' in the editor context menu."
          },
          "C_mantic.headerGuard.style": {
            "type": "string",
            "enum": [
              "Add #define",
              "Add #pragma once",
              "Add both"
            ],
            "default": "Add #define",
            "description": "Controls what style of header guard that is added with the 'Add Header Guard' command."
          },
          "C_mantic.headerGuard.defineFormat": {
            "type": "string",
            "default": "${FILE_NAME_EXT}",
            "description": "Controls how new header guard defines are generated. The variable '${FILE_NAME_EXT}' is replaced with the file name in uppercase, with all symbols replaced with underscores. The variable '${FILE_NAME}' is replaced with the file name in uppercase, not including any file extensions, with all symbols replaced with underscores. For example, a file named 'some-header.h' would generate 'SOME_HEADER_H' and 'SOME_HEADER', respectively."
          }
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "test": "npm run compile && node ./out/test/runTest.js",
    "lint": "eslint -c .eslintrc.js --ext .ts ./src"
  },
  "devDependencies": {
    "@types/chai": "^4.1.7",
    "@types/glob": "^7.1.3",
    "@types/mocha": "^7.0.2",
    "@types/node": "^13.9.3",
    "@types/vscode": "^1.3.0",
    "@typescript-eslint/eslint-plugin": "^4.13.0",
    "@typescript-eslint/parser": "^4.13.0",
    "chai": "^4.2.0",
    "eslint": "^7.18.0",
    "eslint-config-prettier": "^7.1.0",
    "glob": "^7.1.6",
    "mocha": "^7.1.1",
    "typescript": "^3.8.3",
    "vscode-test": "^1.3.0"
  }
}
