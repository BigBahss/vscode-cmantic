{
  "name": "cmantic",
  "displayName": "C-mantic",
  "description": "C/C++ refactorings: Generate Definitions, Getters, Setters, and much more.",
  "version": "0.8.0",
  "icon": "images/cmantic.png",
  "publisher": "tdennis4496",
  "author": {
    "name": "Tyler Dennis",
    "url": "https://github.com/BigBahss"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/BigBahss/vscode-cmantic"
  },
  "bugs": {
    "url": "https://github.com/BigBahss/vscode-cmantic/issues"
  },
  "readme": "README.md",
  "engines": {
    "vscode": "^1.49.0"
  },
  "categories": [
    "Programming Languages"
  ],
  "keywords": [
    "c++",
    "refactor",
    "generate definition",
    "generate declaration",
    "generate getter setter"
  ],
  "activationEvents": [
    "onLanguage:c",
    "onLanguage:cpp"
  ],
  "main": "./dist/extension",
  "dependencies": {
    "xregexp": "^5.0.1"
  },
  "contributes": {
    "commands": [
      {
        "command": "cmantic.addDefinitionInSourceFile",
        "title": "Add Definition in matching source file",
        "category": "C-mantic"
      },
      {
        "command": "cmantic.addDefinitionInCurrentFile",
        "title": "Add Definition in this file",
        "category": "C-mantic"
      },
      {
        "command": "cmantic.addDefinitions",
        "title": "Add Definitions...",
        "category": "C-mantic"
      },
      {
        "command": "cmantic.addDeclaration",
        "title": "Add Declaration",
        "category": "C-mantic"
      },
      {
        "command": "cmantic.moveDefinitionToMatchingSourceFile",
        "title": "Move Definition to matching source file",
        "category": "C-mantic"
      },
      {
        "command": "cmantic.moveDefinitionIntoOrOutOfClass",
        "title": "Move Definition into/out-of class body",
        "category": "C-mantic"
      },
      {
        "command": "cmantic.generateGetterSetter",
        "title": "Generate Getter and Setter",
        "category": "C-mantic"
      },
      {
        "command": "cmantic.generateGetter",
        "title": "Generate Getter",
        "category": "C-mantic"
      },
      {
        "command": "cmantic.generateSetter",
        "title": "Generate Setter",
        "category": "C-mantic"
      },
      {
        "command": "cmantic.generateEqualityOperators",
        "title": "Generate Equality Operators",
        "category": "C-mantic"
      },
      {
        "command": "cmantic.generateRelationalOperators",
        "title": "Generate Relational Operators",
        "category": "C-mantic"
      },
      {
        "command": "cmantic.generateStreamOutputOperator",
        "title": "Generate Stream Output Operator",
        "category": "C-mantic"
      },
      {
        "command": "cmantic.createMatchingSourceFile",
        "title": "Create Matching Source File",
        "category": "C-mantic"
      },
      {
        "command": "cmantic.addHeaderGuard",
        "title": "Add Header Guard",
        "category": "C-mantic"
      },
      {
        "command": "cmantic.addInclude",
        "title": "Add Include",
        "category": "C-mantic"
      },
      {
        "command": "cmantic.switchHeaderSourceInWorkspace",
        "title": "Switch Header/Source in Workspace",
        "category": "C-mantic"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "command": "cmantic.switchHeaderSourceInWorkspace",
          "group": "navigation@100",
          "when": "resourceLangId =~ /^c|cpp$/ && config.C_mantic.contextMenu.switchHeaderSource"
        }
      ]
    },
    "configuration": [
      {
        "title": "C-mantic",
        "type": "object",
        "properties": {
          "C_mantic.alertLevel": {
            "type": "string",
            "enum": [
              "Information",
              "Warning",
              "Error"
            ],
            "default": "Information",
            "markdownDescription": "Controls verbosity of alerts that are shown (notifications). These alerts exist to indicate when you might be misusing a command, or if a command couldn't be executed for various reasons, etc. All alerts are logged to the `Output Panel`, regardless of alert level. The order of levels from least verbose to most verbose is: `Error` < `Warning` < `Information`.",
            "scope": "window"
          },
          "C_mantic.codeActions.enableAddDefinition": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Controls whether the `Add Definition` code actions are suggested (light-bulb menu). The code actions will still be available from the `Refactor...` menu.",
            "scope": "window"
          },
          "C_mantic.codeActions.enableAddDeclaration": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Controls whether the `Add Declaration` code action is suggested (light-bulb menu). The code action will still be available from the `Refactor...` menu.",
            "scope": "window"
          },
          "C_mantic.codeActions.enableMoveDefinition": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Controls whether the `Move Definition` code actions are suggested (light-bulb menu). The code actions will still be available from the `Refactor...` menu.",
            "scope": "window"
          },
          "C_mantic.codeActions.enableGenerateGetterSetter": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Controls whether the `Generate Getter/Setter` code actions are suggested (light-bulb menu). The code actions will still be available from the `Refactor...` menu.",
            "scope": "window"
          },
          "C_mantic.contextMenu.switchHeaderSource": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Show `Switch Header/Source in Workspace` in the editor context menu.",
            "scope": "window"
          },
          "C_mantic.extensions.headerFiles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "h",
              "hpp",
              "hh",
              "hxx"
            ],
            "description": "File extensions to associate with header files.",
            "scope": "resource"
          },
          "C_mantic.extensions.sourceFiles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "c",
              "cpp",
              "cc",
              "cxx"
            ],
            "description": "File extensions to associate with source files.",
            "scope": "resource"
          },
          "C_mantic.c.curlyBraceFormat.function": {
            "type": "string",
            "enum": [
              "New line",
              "Same line"
            ],
            "default": "New line",
            "markdownDescription": "Controls how to format the opening curly brace when adding a new function definition in `C`.",
            "scope": "resource"
          },
          "C_mantic.cpp.curlyBraceFormat.function": {
            "type": "string",
            "enum": [
              "New line",
              "New line for constructors and destructors",
              "Same line"
            ],
            "enumDescriptions": [
              "",
              "Places the opening curly brace on a new line for constructors and destructors, and places it on the same line for all other functions.",
              ""
            ],
            "default": "New line for constructors and destructors",
            "markdownDescription": "Controls how to format the opening curly brace when adding a new function definition in `C++`.",
            "scope": "resource"
          },
          "C_mantic.cpp.curlyBraceFormat.namespace": {
            "type": "string",
            "enum": [
              "Auto",
              "New line",
              "Same line"
            ],
            "enumDescriptions": [
              "Detects namespace curly brace format from the header file.",
              "",
              ""
            ],
            "default": "Auto",
            "markdownDescription": "Controls how to format the opening curly brace when generating namespaces from a header in `C++`.",
            "scope": "resource"
          },
          "C_mantic.cpp.generateNamespaces": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Controls whether namespace blocks are generated when invoking `Create Matching Source File` on a header containing namespaces.",
            "scope": "resource"
          },
          "C_mantic.cpp.accessor.boolGetterIsPrefix": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Generate bool getters with an 'is' prefix. For example, a data member `bool enabled` will generate a getter named `isEnabled` rather than `getEnabled`.",
            "scope": "resource"
          },
          "C_mantic.cpp.accessor.getterDefinitionLocation": {
            "type": "string",
            "enum": [
              "Generate definition inline",
              "Generate definition below class body",
              "Generate definition in matching source file"
            ],
            "markdownEnumDescriptions": [
              "Generates the definition inside the class definition.",
              "Generates the definition in the same file, below the class definition.",
              "Generates the definition in the matching source file. Falls back to `Generate definition below class body` if a source file is not found."
            ],
            "default": "Generate definition inline",
            "description": "Controls where the definitions of new getters are placed.",
            "scope": "resource"
          },
          "C_mantic.cpp.accessor.setterDefinitionLocation": {
            "type": "string",
            "enum": [
              "Generate definition inline",
              "Generate definition below class body",
              "Generate definition in matching source file"
            ],
            "markdownEnumDescriptions": [
              "Generates the definition inside the class definition.",
              "Generates the definition in the same file, below the class definition.",
              "Generates the definition in the matching source file. Falls back to `Generate definition below class body` if a source file is not found."
            ],
            "default": "Generate definition inline",
            "description": "Controls where the definitions of new setters are placed.",
            "scope": "resource"
          },
          "C_mantic.cpp.resolveTypes": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Controls whether generating setters will attempt to resolve `typedef`'s, `type-alias`'s, and `enum`'s in order to determine if the parameter should be pass-by-value instead of pass-by-const-reference. Disabled by default because this may impact performance when generating setters.",
            "scope": "resource"
          },
          "C_mantic.cpp.bracedInitialization": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether initializer lists for constructors will use curly braces instead of parentheses.",
            "scope": "resource"
          },
          "C_mantic.cpp.useExplicitThisPointer": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Controls whether generated member functions will explicitly prefix members with `this->`.",
            "scope": "resource"
          },
          "C_mantic.cpp.friendComparisonOperators": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Generate comparison operators (such as `operator==`) as `friend` functions rather than member functions.",
            "scope": "resource"
          },
          "C_mantic.headerGuard.style": {
            "type": "string",
            "enum": [
              "Add #define",
              "Add #pragma once",
              "Add both"
            ],
            "markdownEnumDescriptions": [
              "Wraps the file in an `#ifndef ... #define ...` block.",
              "Adds `#pragma once` to the top of the file.",
              "Adds `#pragma once` and wraps the file in an `#ifndef ... #define ...` block."
            ],
            "default": "Add #define",
            "markdownDescription": "Controls what kind of header guard is added with the `Add Header Guard` command.",
            "scope": "resource"
          },
          "C_mantic.headerGuard.defineFormat": {
            "type": "string",
            "default": "${FILE_NAME}_${EXT}",
            "markdownDescription": "Template used to generate identifiers for header guard `#define`'s. The variables are:\n\n`${FILE_NAME}` : The name of the file without the file extension.\n\n`${EXT}` : The file extension.\n\n`${DIR}` : The name of the directory the file exists in.\n\n`${PROJECT_NAME}` : The name of the workspace.\n\n`${PROJECT_REL_PATH}` : The path to the file, relative to the workspace, not including the file name.\n\nAll characters are made upper-case and all symbols are replaced with underscores.",
            "scope": "resource"
          },
          "C_mantic.revealNewDefinition": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Controls whether `Add Definition` reveals the new definition in the editor.",
            "scope": "resource"
          },
          "C_mantic.alwaysMoveComments": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Controls whether `Move Definition` will move leading comments even if a declaration is being left behind in its place. When false, leading comments will be left behind with the new declaration.",
            "scope": "resource"
          },
          "C_mantic.caseStyle": {
            "type": "string",
            "enum": [
              "snake_case",
              "camelCase",
              "PascalCase"
            ],
            "default": "camelCase",
            "description": "Controls what style of names are generated for getters and setters.",
            "scope": "resource"
          }
        }
      }
    ]
  },
  "scripts": {
    "compile": "webpack --mode development",
    "compile-watch": "webpack --mode development --watch",
    "pretest": "tsc --project ./",
    "test": "npm run compile && npm run pretest && node ./out/test/runTest.js",
    "lint": "eslint -c .eslintrc.js --ext .ts ./src --max-warnings=0",
    "vscode:prepublish": "npm run lint && webpack --mode production",
    "package": "vsce package"
  },
  "devDependencies": {
    "@types/chai": "^4.1.7",
    "@types/glob": "^7.1.3",
    "@types/mocha": "^7.0.2",
    "@types/node": "^13.9.3",
    "@types/vscode": "^1.49.0",
    "@types/xregexp": "^4.3.0",
    "@typescript-eslint/eslint-plugin": "^4.13.0",
    "@typescript-eslint/parser": "^4.13.0",
    "chai": "^4.2.0",
    "eslint": "^7.18.0",
    "eslint-config-prettier": "^7.1.0",
    "glob": "^7.1.6",
    "mocha": "^7.1.1",
    "ts-loader": "^8.1.0",
    "typescript": "^3.8.3",
    "vscode-test": "^1.3.0",
    "webpack": "^5.28.0",
    "webpack-cli": "^4.6.0"
  }
}
