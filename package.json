{
  "name": "cmantic",
  "displayName": "C-mantic",
  "description": "C/C++ extension for VS Code that adds semantic aware commands and refactorings.",
  "version": "0.1.0",
  "author": {
    "name": "Tyler Dennis",
    "url": "https://github.com/BigBahss"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/BigBahss/vscode-cmantic"
  },
  "engines": {
    "vscode": "^1.3.0"
  },
  "categories": [
    "Programming Languages"
  ],
  "keywords": [
    "c",
    "c++",
    "cpp",
    "switch",
    "header",
    "source",
    "definition",
    "refactor",
    "action",
    "include"
  ],
  "activationEvents": [
    "onCommand:cmantic.switchHeaderSourceInWorkspace",
    "onCommand:cmantic.addDefinition",
    "onCommand:cmantic.addDefinitionInSourceFile",
    "onCommand:cmantic.addDefinitionInCurrentFile",
    "onCommand:cmantic.createMatchingSourceFile",
    "onCommand:cmantic.addInclude",
    "onCommand:editor.action.refactor",
    "onCommand:editor.action.sourceAction",
    "onLanguage:cpp",
    "onLanguage:c"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "cmantic.switchHeaderSourceInWorkspace",
        "title": "Switch Header/Source in Workspace"
      },
      {
        "command": "cmantic.addDefinition",
        "title": "C-mantic: Add Definition"
      },
      {
        "command": "cmantic.addDefinitionInSourceFile",
        "title": "C-mantic: Add Definition in matching source file"
      },
      {
        "command": "cmantic.addDefinitionInCurrentFile",
        "title": "C-mantic: Add Definition in this file"
      },
      {
        "command": "cmantic.createMatchingSourceFile",
        "title": "C-mantic: Create Matching Source File"
      },
      {
        "command": "cmantic.addInclude",
        "title": "C-mantic: Add Include"
      },
      {
        "command": "cmantic.addHeaderGuard",
        "title": "C-mantic: Add Header Guard"
      },
      {
        "command": "editor.action.refactor",
        "title": "Refactor..."
      },
      {
        "command": "editor.action.sourceAction",
        "title": "Source Action..."
      }
    ],
    "menus": {
      "editor/context": [
        {
          "command": "cmantic.switchHeaderSourceInWorkspace",
          "group": "navigation@100",
          "when": "resourceLangId =~ /^c|cpp$/ && config.C_mantic.ContextSwitchHeaderSource"
        },
        {
          "command": "editor.action.refactor",
          "group": "1_modification@2",
          "when": "resourceLangId =~ /^c|cpp$/"
        },
        {
          "command": "editor.action.sourceAction",
          "group": "1_modification@2",
          "when": "resourceLangId =~ /^c|cpp$/"
        }
      ]
    },
    "codeActions": [
      {
        "actions": {
          "title": "%codeActions.refactor.title%",
          "description": "%codeActions.refactor.description%",
          "kind": "refactor"
        },
        "languages": [
          "c",
          "cpp"
        ]
      }
    ],
    "configuration": [
      {
        "title": "C-mantic",
        "type": "object",
        "properties": {
          "C_mantic.HeaderFileExtensions": {
            "type": "array",
            "default": [
              "h",
              "hpp",
              "hh",
              "hxx"
            ],
            "description": "File extensions to associate header files."
          },
          "C_mantic.SourceFileExtensions": {
            "type": "array",
            "default": [
              "c",
              "cpp",
              "cc",
              "cxx"
            ],
            "description": "File extensions to associate source files."
          },
          "C_mantic.CurlyBraceFormat": {
            "type": "string",
            "enum": [
              "New line",
              "New line for constructors and destructors",
              "Same line"
            ],
            "default": "New line",
            "description": "Controls how to format the opening curly brace when adding a new function definition."
          },
          "C_mantic.ContextSwitchHeaderSource": {
            "type": "boolean",
            "default": true,
            "description": "Show 'Switch Header/Source in Workspace' in the editor context menu."
          },
          "C_mantic.HeaderGuardStyle": {
            "type": "string",
            "enum": [
              "Add #define",
              "Add #pragma once",
              "Add both"
            ],
            "default": "Add #define",
            "description": "Controls what kind of header guard to add."
          },
					"C_mantic.HeaderGuardDefineFormat": {
						"type": "string",
						"default": "${FILENAME_EXT}",
						"description": "Controls how new header guard defines are generated. The variable '${FILENAME_EXT}' is replaced with the file name in uppercase, with any file extension dots replaced with underscores. The variable '${FILENAME}' is replaced with the file name in upppercase, not including any file extensions. For example, a file named 'some_header.h' would generate 'SOME_HEADER_H' and 'SOME_HEADER', respectively."
					}
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "test": "npm run compile && node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/chai": "^4.1.7",
    "@types/glob": "^7.1.3",
    "@types/mocha": "^7.0.2",
    "@types/node": "^13.9.3",
    "@types/vscode": "^1.3.0",
    "chai": "^4.2.0",
    "glob": "^7.1.6",
    "mocha": "^7.1.1",
    "tslint": "^6.1.3",
    "typescript": "^3.8.3",
    "vscode-test": "^1.3.0"
  },
  "dependencies": {}
}
