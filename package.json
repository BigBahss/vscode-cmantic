{
  "name": "cmantic",
  "displayName": "C-mantic",
  "description": "C/C++ refactorings: Generate Definitions, Getters, Setters, and much more.",
  "version": "0.6.3",
  "icon": "images/cmantic.png",
  "publisher": "tdennis4496",
  "author": {
    "name": "Tyler Dennis",
    "url": "https://github.com/BigBahss"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/BigBahss/vscode-cmantic"
  },
  "bugs": {
    "url": "https://github.com/BigBahss/vscode-cmantic/issues"
  },
  "readme": "README.md",
  "engines": {
    "vscode": "^1.49.0"
  },
  "dependencies": {
    "xregexp": "^5.0.1"
  },
  "categories": [
    "Programming Languages"
  ],
  "keywords": [
    "c++",
    "refactor",
    "generate definition",
    "generate accessor",
    "getter setter"
  ],
  "activationEvents": [
    "onLanguage:c",
    "onLanguage:cpp"
  ],
  "main": "./dist/extension",
  "contributes": {
    "commands": [
      {
        "command": "cmantic.addDefinitionInSourceFile",
        "title": "C-mantic: Add Definition in matching source file"
      },
      {
        "command": "cmantic.addDefinitionInCurrentFile",
        "title": "C-mantic: Add Definition in this file"
      },
      {
        "command": "cmantic.addDeclaration",
        "title": "C-mantic: Add Declaration"
      },
      {
        "command": "cmantic.moveDefinitionToMatchingSourceFile",
        "title": "C-mantic: Move Definition to matching source file"
      },
      {
        "command": "cmantic.moveDefinitionIntoOrOutOfClass",
        "title": "C-mantic: Move Definition into/out-of class body"
      },
      {
        "command": "cmantic.generateGetterSetter",
        "title": "C-mantic: Generate Getter and Setter Member Functions"
      },
      {
        "command": "cmantic.generateGetter",
        "title": "C-mantic: Generate Getter Member Function"
      },
      {
        "command": "cmantic.generateSetter",
        "title": "C-mantic: Generate Setter Member Function"
      },
      {
        "command": "cmantic.generateEqualityOperators",
        "title": "C-mantic: Generate Equality Operators"
      },
      {
        "command": "cmantic.createMatchingSourceFile",
        "title": "C-mantic: Create Matching Source File"
      },
      {
        "command": "cmantic.addHeaderGuard",
        "title": "C-mantic: Add Header Guard"
      },
      {
        "command": "cmantic.addInclude",
        "title": "C-mantic: Add Include"
      },
      {
        "command": "cmantic.switchHeaderSourceInWorkspace",
        "title": "Switch Header/Source in Workspace"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "command": "cmantic.switchHeaderSourceInWorkspace",
          "group": "navigation@100",
          "when": "resourceLangId =~ /^c|cpp$/ && config.C_mantic.contextMenu.switchHeaderSource"
        }
      ]
    },
    "configuration": [
      {
        "title": "C-mantic",
        "type": "object",
        "properties": {
          "C_mantic.alertLevel": {
            "type": "string",
            "enum": [
              "Information",
              "Warning",
              "Error"
            ],
            "default": "Information",
            "description": "Controls verbosity of alerts that are shown (notifications). These alerts exist to indicate when you might be misusing a command, or if a command couldn't be executed for various reasons, etc. All alerts are logged to the Output Panel, regardless of alert level. The order of levels from least verbose to most verbose is: Error < Warning < Information."
          },
          "C_mantic.codeActions.enableAddDefinition": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether the 'Add Definition' code actions are suggested (light-bulb menu). The code actions will still be available from the 'Refactor...' menu."
          },
          "C_mantic.codeActions.enableAddDeclaration": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether the 'Add Declaration' code action is suggested (light-bulb menu). The code action will still be available from the 'Refactor...' menu."
          },
          "C_mantic.codeActions.enableMoveDefinition": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether the 'Move Definition' code actions are suggested (light-bulb menu). The code actions will still be available from the 'Refactor...' menu."
          },
          "C_mantic.codeActions.enableGenerateGetterSetter": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether the 'Generate Getter/Setter' code actions are suggested (light-bulb menu). The code actions will still be available from the 'Refactor...' menu."
          },
          "C_mantic.extensions.headerFiles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "h",
              "hpp",
              "hh",
              "hxx"
            ],
            "description": "File extensions to associate with header files."
          },
          "C_mantic.extensions.sourceFiles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "c",
              "cpp",
              "cc",
              "cxx"
            ],
            "description": "File extensions to associate with source files."
          },
          "C_mantic.c.curlyBraceFormat.function": {
            "type": "string",
            "enum": [
              "New line",
              "Same line"
            ],
            "default": "New line",
            "description": "Controls how to format the opening curly brace when adding a new function definition in C."
          },
          "C_mantic.cpp.curlyBraceFormat.function": {
            "type": "string",
            "enum": [
              "New line",
              "New line for constructors and destructors",
              "Same line"
            ],
            "default": "New line for constructors and destructors",
            "description": "Controls how to format the opening curly brace when adding a new function definition in C++."
          },
          "C_mantic.cpp.curlyBraceFormat.namespace": {
            "type": "string",
            "enum": [
              "Auto",
              "New line",
              "Same line"
            ],
            "default": "Auto",
            "description": "Controls how to format the opening curly brace when generating namespaces from a header in C++. 'Auto' will detect namespace curly brace format from the header file."
          },
          "C_mantic.cpp.indentation.namespace": {
            "type": "string",
            "enum": [
              "Auto",
              "Always",
              "Never"
            ],
            "default": "Auto",
            "description": "Controls whether to indent the body when generating namespaces from a header in C++. 'Auto' will detect namespace indentation from the header file."
          },
          "C_mantic.cpp.generateNamespaces": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether namespace blocks are generated when invoking 'Create Matching Source File' on a header containing namespaces."
          },
          "C_mantic.cpp.accessor.boolGetterIsPrefix": {
            "type": "boolean",
            "default": false,
            "description": "Generate bool getters with an 'is' prefix. For example, a data member 'bool enabled' will generate a getter named 'isEnabled'."
          },
          "C_mantic.cpp.accessor.getterDefinitionLocation": {
            "type": "string",
            "enum": [
              "Generate definition inline",
              "Generate definition below class body",
              "Generate definition in matching source file"
            ],
            "default": "Generate definition inline",
            "description": "Controls where the definitions of new getter member functions are placed. If set to 'Generate definition in matching source file' and a matching source file cannot be found, then it will fallback to 'Generate definition below class body'."
          },
          "C_mantic.cpp.accessor.setterDefinitionLocation": {
            "type": "string",
            "enum": [
              "Generate definition inline",
              "Generate definition below class body",
              "Generate definition in matching source file"
            ],
            "default": "Generate definition inline",
            "description": "Controls where the definitions of new setter member functions are placed. If set to 'Generate definition in matching source file' and a matching source file cannot be found, then it will fallback to 'Generate definition below class body'."
          },
          "C_mantic.cpp.resolveTypes": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether generating setters will attempt to resolve typedefs, type-aliases, and enums in order to determine if the parameter should be pass-by-value instead of pass-by-const-reference. Disabled by default because this may impact the performance of the generating setters."
          },
          "C_mantic.cpp.bracedInitialization": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether member initializer lists for constructors will use curly braces instead of parentheses."
          },
          "C_mantic.cpp.useExplicitThisPointer": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether generated member functions will explicitly prefix members with 'this->'."
          },
          "C_mantic.contextMenu.switchHeaderSource": {
            "type": "boolean",
            "default": true,
            "description": "Show 'Switch Header/Source in Workspace' in the editor context menu."
          },
          "C_mantic.headerGuard.style": {
            "type": "string",
            "enum": [
              "Add #define",
              "Add #pragma once",
              "Add both"
            ],
            "default": "Add #define",
            "description": "Controls what kind of header guard is added with the 'Add Header Guard' command."
          },
          "C_mantic.headerGuard.defineFormat": {
            "type": "string",
            "default": "${FILE_NAME}_${EXT}",
            "description": "Controls how new header guard defines are generated. There are many variables you can use to generate them:\n${FILE_NAME} : The name of the file without the file extension.\n${EXT} : The file extension.\n${DIR} : The name of the directory the file exists in.\n${PROJECT_NAME} : The name of the workspace.\n${PROJECT_REL_PATH} : The path to the file, relative to the workspace, not including the file name.\nAll characters are made upper-case and all symbols are replaced with underscores."
          },
          "C_mantic.revealNewDefinition": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether 'Add Definition' reveals the new definition in the editor."
          },
          "C_mantic.alwaysMoveComments": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether 'Move Definition' will move leading comments even if a declaration is being left behind in its place. If false, leading comments will be left behind with the new declaration."
          },
          "C_mantic.caseStyle": {
            "type": "string",
            "enum": [
              "snake_case",
              "camelCase",
              "PascalCase"
            ],
            "default": "camelCase",
            "description": "Controls what style of names are generated for getters and setters."
          }
        }
      }
    ]
  },
  "scripts": {
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "test": "npm run compile && node ./out/test/runTest.js",
    "lint": "eslint -c .eslintrc.js --ext .ts ./src",
    "package": "vsce package",
    "vscode:prepublish": "webpack --mode production",
    "webpack": "webpack --mode development",
    "webpack-dev": "webpack --mode development --watch"
  },
  "devDependencies": {
    "@types/chai": "^4.1.7",
    "@types/glob": "^7.1.3",
    "@types/mocha": "^7.0.2",
    "@types/node": "^13.9.3",
    "@types/vscode": "^1.49.0",
    "@types/xregexp": "^4.3.0",
    "@typescript-eslint/eslint-plugin": "^4.13.0",
    "@typescript-eslint/parser": "^4.13.0",
    "chai": "^4.2.0",
    "eslint": "^7.18.0",
    "eslint-config-prettier": "^7.1.0",
    "glob": "^7.1.6",
    "mocha": "^7.1.1",
    "ts-loader": "^8.1.0",
    "typescript": "^3.8.3",
    "vscode-test": "^1.3.0",
    "webpack": "^5.28.0",
    "webpack-cli": "^4.6.0"
  }
}
